package Backend.Index;

import java.util.ArrayList;

public class Node{

	ArrayList<Reference> references;
	Node[] children;
	Comparable xMin;
	Comparable xMax;
	Comparable yMin;
	Comparable yMax;
	Comparable zMin;
	Comparable zMax;
	int capacity;

	public Node(Comparable xMin, Comparable xMax, Comparable yMin, Comparable yMax,
			Comparable zMin, Comparable zMax) {

		
		this.capacity = 1;
		this.references = new ArrayList<Reference>(capacity);
		
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
		
		this.children = new Node[8];
	}

	
public static void splitNodeandInsert(Node n, Reference r) {
		
		ArrayList<Reference> tmp = new ArrayList<Reference>();

		for(Reference ref: n.references ) {
			tmp.add(ref);
		}
		
		tmp.add(r);
		n.references.clear();


		Dimension nodex = new Dimension();
		
		
		
		Comparable[] splitX = splitRange(this.x);
		Comparable[] splitY= splitRange(this.y);
		Comparable[] splitZ= splitRange(this.z);

		

		//x1
		Comparable x1min = splitX[0];
		Comparable x1max = splitX[1];
		//x2
		Comparable x2min = splitX[2];
		Comparable x2max = splitX[3];

		//y1
		Comparable y1min = splitY[0];
		Comparable y1max = splitY[1];
		//y2
		Comparable y2min = splitY[2];
		Comparable y2max = splitY[3];

		//z1
		Comparable z1min = splitZ[0];
		Comparable z1max = splitZ[1];
		//z2
		Comparable z2min = splitZ[2];
		Comparable z2max = splitZ[3];


		Node n1 = new Node(x1min,x1max,y1min,y1max,z1min,z1max);
		Node n2 = new Node(x1min,x1max,y1min,y1max,z2min,z2max);
		Node n3 = new Node(x1min,x1max,y2min,y2max,z1min,z1max);
		Node n4 = new Node(x1min,x1max,y2min,y2max,z2min,z2max);
		Node n5 = new Node(x2min,x2max,y1min,y1max,z1min,z1max);
		Node n6 = new Node(x2min,x2max,y1min,y1max,z2min,z2max);
		Node n7 = new Node(x2min,x2max,y2min,y2max,z1min,z1max);
		Node n8 = new Node(x2min,x2max,y2min,y2max,z2min,z2max);


		this.root.children[0] = n1;
		this.root.children[1] = n2;
		this.root.children[2] = n3;
		this.root.children[3] = n4;
		this.root.children[4] = n5;
		this.root.children[5] = n6;
		this.root.children[6] = n7;
		this.root.children[7] = n8;


		for(Reference ref : tmp) {
			
			for(Node n : this.root.children) {
				
				if((ref.xValue.compareTo(n.xMin)>=0 && ref.xValue.compareTo(n.xMax)<0) &&
						(ref.yValue.compareTo(n.yMin)>=0 && ref.yValue.compareTo(n.yMax)<0)&&
						(ref.zValue.compareTo(n.zMin)>=0 && ref.zValue.compareTo(n.zMax)<0))  {
					
					n.references.add(ref);
					
				}
			}
			
		}
		
		
	}
	
	
	
}



//x  0-100  0-49, 50-100
//y 0-20	0-4, 5-10
//z 0-50	0-24, 25-50






